{"version":3,"sources":["features/users/usersSlice.js","features/users/AddUser.jsx","features/users/EditUser.jsx","features/users/UserList.jsx","App.js","store.js","index.js"],"names":["fetchUsers","createAsyncThunk","a","fetch","response","json","users","usersSlice","createSlice","name","initialState","entities","loading","reducers","userAdded","state","action","push","payload","userUpdated","id","email","existingUser","find","user","userDeleted","filter","extraReducers","pending","fulfilled","rejected","actions","AddUser","dispatch","useDispatch","history","useHistory","useState","setName","setEmail","error","setError","usersAmount","useSelector","length","className","htmlFor","type","placeholder","onChange","e","target","value","onClick","EditUser","pathname","useLocation","userId","parseInt","replace","UserList","to","map","i","handleDelete","App","path","configureStore","reducer","usersReducer","store","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76ccd181.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const users = await response.json();\n  return users;\n});\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false,\n  },\n  reducers: {\n    userAdded(state, action) {\n      state.entities.push(action.payload);\n    },\n    userUpdated(state, action) {\n      const { id, name, email } = action.payload;\n      const existingUser = state.entities.find((user) => user.id === id);\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.email = email;\n      }\n    },\n    userDeleted(state, action) {\n      const { id } = action.payload;\n      const existingUser = state.entities.find((user) => user.id === id);\n      if (existingUser) {\n        state.entities = state.entities.filter((user) => user.id !== id);\n      }\n    },\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { userAdded, userUpdated, userDeleted } = usersSlice.actions;\n\nexport default usersSlice.reducer;\n","import { useDispatch, useSelector } from \"react-redux\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { userAdded } from \"./usersSlice\";\n\nexport function AddUser() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  const handleName = (e) => setName(e.target.value);\n  const handleEmail = (e) => setEmail(e.target.value);\n\n  const usersAmount = useSelector((state) => state.users.entities.length);\n\n  const handleClick = () => {\n    if (name && email) {\n      dispatch(\n        userAdded({\n          id: usersAmount + 1,\n          name,\n          email,\n        })\n      );\n\n      setError(null);\n      history.push(\"/\");\n    } else {\n      setError(\"Fill in all fields\");\n    }\n\n    setName(\"\");\n    setEmail(\"\");\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h1>Add user</h1>\n      </div>\n      <div className=\"row\">\n        <div className=\"three columns\">\n          <label htmlFor=\"nameInput\">Name</label>\n          <input\n            className=\"u-full-width\"\n            type=\"text\"\n            placeholder=\"test@mailbox.com\"\n            id=\"nameInput\"\n            onChange={handleName}\n            value={name}\n          />\n          <label htmlFor=\"emailInput\">Email</label>\n          <input\n            className=\"u-full-width\"\n            type=\"email\"\n            placeholder=\"test@mailbox.com\"\n            id=\"emailInput\"\n            onChange={handleEmail}\n            value={email}\n          />\n          {error && error}\n          <button onClick={handleClick} className=\"button-primary\">\n            Add user\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport { useState } from \"react\";\nimport { userUpdated } from \"./usersSlice\";\n\nexport function EditUser() {\n  const { pathname } = useLocation();\n  const userId = parseInt(pathname.replace(\"/edit-user/\", \"\"));\n\n  const user = useSelector((state) =>\n    state.users.entities.find((user) => user.id === userId)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [name, setName] = useState(user.name);\n  const [email, setEmail] = useState(user.email);\n  const [error, setError] = useState(null);\n\n  const handleName = (e) => setName(e.target.value);\n  const handleEmail = (e) => setEmail(e.target.value);\n\n  const handleClick = () => {\n    if (name && email) {\n      dispatch(\n        userUpdated({\n          id: userId,\n          name,\n          email,\n        })\n      );\n\n      setError(null);\n      history.push(\"/\");\n    } else {\n      setError(\"Fill in all fields\");\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h1>Edit user</h1>\n      </div>\n      <div className=\"row\">\n        <div className=\"three columns\">\n          <label htmlFor=\"nameInput\">Name</label>\n          <input\n            className=\"u-full-width\"\n            type=\"text\"\n            placeholder=\"test@mailbox.com\"\n            id=\"nameInput\"\n            onChange={handleName}\n            value={name}\n          />\n          <label htmlFor=\"emailInput\">Email</label>\n          <input\n            className=\"u-full-width\"\n            type=\"email\"\n            placeholder=\"test@mailbox.com\"\n            id=\"emailInput\"\n            onChange={handleEmail}\n            value={email}\n          />\n          {error && error}\n          <button onClick={handleClick} className=\"button-primary\">\n            Save user\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { fetchUsers, userDeleted } from \"./usersSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Link } from \"react-router-dom\";\n\nexport function UserList() {\n  const dispatch = useDispatch();\n\n  const { entities } = useSelector((state) => state.users);\n  const loading = useSelector((state) => state.loading);\n\n  const handleDelete = (id) => {\n    dispatch(userDeleted({ id }));\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h1>Redux CRUD User app</h1>\n      </div>\n      <div className=\"row\">\n        <div className=\"two columns\">\n          <button\n            onClick={() => dispatch(fetchUsers())}\n            className=\"button-primary\"\n          >\n            Load users\n          </button>\n        </div>\n        <div className=\"two columns\">\n          <Link to=\"/add-user\">\n            <button className=\"button-primary\">Add user</button>\n          </Link>\n        </div>\n      </div>\n      <div className=\"row\">\n        {loading ? (\n          \"Loading...\"\n        ) : (\n          <table className=\"u-full-width\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {entities.length &&\n                entities.map(({ id, name, email }, i) => (\n                  <tr key={i}>\n                    <td>{id}</td>\n                    <td>{name}</td>\n                    <td>{email}</td>\n                    <td>\n                      <button onClick={() => handleDelete(id)}>Delete</button>\n                      <Link to={`/edit-user/${id}`}>\n                        <button>Edit</button>\n                      </Link>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nimport { AddUser } from \"./features/users/AddUser\";\nimport { EditUser } from \"./features/users/EditUser\";\nimport React from \"react\";\nimport { UserList } from \"./features/users/UserList\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/add-user\">\n            <AddUser />\n          </Route>\n          <Route path=\"/edit-user\">\n            <EditUser />\n          </Route>\n          <Route path=\"/\">\n            <UserList />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport usersReducer from \"./features/users/usersSlice\";\n\nexport default configureStore({\n  reducer: {\n    users: usersReducer,\n  },\n});\n","import App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { fetchUsers } from \"./features/users/usersSlice\";\nimport store from \"./store\";\n\nstore.dispatch(fetchUsers());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}